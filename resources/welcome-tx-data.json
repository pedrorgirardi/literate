[["^ ","~:db/id",-1,"~:widget/uuid","9bf32b39-f989-4cce-a6d1-bd57c89a2d02","~:widget/type","~:widget.type/column","~:widget/children",["~#list",[["^ ","^1","699c99f5-2698-4203-8486-1e45098e217e","^2","~:widget.type/html","~:widget.html/src","<div class=\"flex flex-col space-y-3 p-3 font-light\"><h1 class=\"text-3xl\" style=\"{:font-family &quot;Cinzel&quot;}\">Welcome to Literate</h1><p class=\"text-xl\">Literate is a Clojure & ClojureScript application which you can use to create interactive documents.</p><p class=\"mt-4\">This interface that you're looking at it's called a <span class=\"font-bold\">Widget</span>, and you can create one from a Clojure REPL.</p><p class=\"mt-2 mb1\">There are a few different types of Widgets that are supported:</p><ul class=\"list-disc list-inside ml-2\"><li>Codemirror</li><li>Markdown</li><li>Hiccup</li><li>Vega</li><li>Map</li><li>Column layout</li><li>Row layout</li></ul></div>","~:widget/parent",-1],["^ ","^1","c68902c8-85f6-4a39-887a-20918f22469b","^2","^6","^7","<span class=\"p-2 text-lg\">Vega Lite Widget</span>","^8",-1],["^ ","^1","550509fd-5f36-44e9-886e-4709235c5484","^2","~:widget.type/vega-embed","~:widget.vega-embed/spec",["^ ","$schema","https://vega.github.io/schema/vega-lite/v4.json","~:description","A simple bar chart with embedded data.","~:data",["^ ","~:url","https://vega.github.io/editor/data/stocks.csv"],"~:transform",[["^ ","filter","datum.symbol==='GOOG'"]],"~:mark","line","~:encoding",["^ ","~:x",["^ ","~:field","date","~:type","temporal"],"~:y",["^ ","^C","price","^D","quantitative"]]],"^8",-1],["^ ","^1","925b03bc-fe9f-4ab0-8825-7d93651249a2","^2","^6","^7","<span class=\"p-2 text-lg\">Codemirror Widget</span>","^8",-1],["^ ","^1","25289886-9e48-4353-870c-a2332f65ce17","^2","~:widget.type/codemirror","~:widget.codemirror/mode","clojure","~:widget.codemirror/value","(ns literate.core\n  (:require [literate.server :as server]\n            [clojure.tools.cli :as cli]))\n\n(def cli-options\n  [[\"-p\" \"--port PORT\" \"Port number\"\n    :default 8118\n    :parse-fn #(Integer/parseInt %)\n    :validate [#(< 0 % 0x10000) \"Must be a number between 0 and 65536\"]]])\n\n(defn start [{:keys [port]}]\n  (println\n    (str \"Welcome to Literate\\n\"\n      \"Starting server...\"))\n\n  (server/run-server {:port port})\n\n  (println \"Server is up and running on port:\" port)\n  (println \"Happy coding!\"))\n\n(defn -main [& args]\n  (let [opts (cli/parse-opts args cli-options)\n        port (get-in opts [:options :port])]\n    (start {:port port})))\n","~:widget.codemirror/lineNumbers",false,"^8",-1]]]]]