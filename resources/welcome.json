["~#list",[[1,"~:widget/children",2],[1,"^1",3],[1,"^1",4],[1,"^1",5],[1,"^1",6],[1,"~:widget/type","~:widget.type/column"],[1,"~:widget/uuid","698fb4c2-be3e-46e1-8417-76d7ff26bb7b"],[2,"~:widget/parent",1],[2,"^2","~:widget.type/html"],[2,"^4","a4dff13e-067a-454a-bd8b-6cc4ef92c6a3"],[2,"~:widget.html/src","<div class=\"flex flex-col space-y-3 p-3 font-light\"><h1 style=\"font-family:Cinzel\" class=\"text-3xl\">Welcome to Literate</h1><p class=\"text-xl\">Literate is a Clojure &amp; ClojureScript application which you can use to create interactive documents.</p><p class=\"mt-4\">This interface that you&#x27;re looking at it&#x27;s called a <span class=\"font-bold\">Widget</span>, and you can create one from a Clojure REPL.</p><p class=\"mt-2 mb1\">There are a few different types of Widgets that are supported:</p><ul class=\"list-disc list-inside ml-2\"><li>Codemirror</li><li>Markdown</li><li>Hiccup</li><li>Vega</li><li>Map</li><li>Column layout</li><li>Row layout</li></ul></div>"],[3,"^5",1],[3,"^2","^6"],[3,"^4","029481ff-461b-4a42-b49b-563c03f164bf"],[3,"^7","<span class=\"p-2 text-lg\">Vega Lite Widget</span>"],[4,"^5",1],[4,"^2","~:widget.type/vega-embed"],[4,"^4","a613d36a-3a20-4043-aa8e-16c596eebcf4"],[4,"~:widget.vega-embed/spec",["^ ","$schema","https://vega.github.io/schema/vega-lite/v4.json","~:description","A simple bar chart with embedded data.","~:data",["^ ","~:url","https://vega.github.io/editor/data/stocks.csv"],"~:transform",[["^ ","filter","datum.symbol==='GOOG'"]],"~:mark","line","~:encoding",["^ ","~:x",["^ ","~:field","date","~:type","temporal"],"~:y",["^ ","^B","price","^C","quantitative"]]]],[5,"^5",1],[5,"^2","^6"],[5,"^4","5c7cb00d-dd45-45bb-904f-756bef0960cc"],[5,"^7","<span class=\"p-2 text-lg\">Codemirror Widget</span>"],[6,"^5",1],[6,"^2","~:widget.type/codemirror"],[6,"^4","d80b9e0a-03c7-484b-835a-bf717a3a6581"],[6,"~:widget.codemirror/lineNumbers",false],[6,"~:widget.codemirror/mode","clojure"],[6,"~:widget.codemirror/value","(ns literate.core\n  (:require [literate.server :as server]\n            [clojure.tools.cli :as cli]))\n\n(def cli-options\n  [[\"-p\" \"--port PORT\" \"Port number\"\n    :default 8118\n    :parse-fn #(Integer/parseInt %)\n    :validate [#(< 0 % 0x10000) \"Must be a number between 0 and 65536\"]]])\n\n(defn -main [& args]\n  (let [opts (cli/parse-opts args cli-options)\n        port (get-in opts [:options :port])]\n\n    (println\n      (str \"Welcome to Literate\\n\"\n           \"Starting server...\"))\n\n    (server/run-server {:port port})\n\n    (println \"Up and running on port:\" port)\n    (println \"Happy coding!\")))\n"]]]