["^ ","count",29,"tx0",536870912,"max-eid",9,"max-tx",536870919,"schema","{:widget/uuid {:db/unique :db.unique/identity}, :widget/parent {:db/valueType :db.type/ref, :db/cardinality :db.cardinality/one}, :widget/children {:db/valueType :db.type/ref, :db/cardinality :db.cardinality/many}}","attrs",[":widget/children",":widget/parent",":widget/type",":widget/uuid",":widget.codemirror/lineNumbers",":widget.codemirror/mode",":widget.codemirror/value",":widget.html/src",":widget.vega-embed/spec"],"keywords",[":widget.type/column",":widget.type/html",":widget.type/vega-embed",":widget.type/codemirror"],"eavt",[[4,0,5,7],[4,0,6,7],[4,0,7,7],[4,0,8,7],[4,0,9,7],[4,2,[0,0],7],[4,3,"178884ee-b656-4225-9baf-37d54793ee02",7],[5,1,4,7],[5,2,[0,1],7],[5,3,"bed2e1fb-c7f8-4a92-a72f-48287256e6ae",7],[5,7,"<div class=\"flex flex-col space-y-3 p-3 font-light\"><h1 class=\"text-3xl\" style=\"{:font-family &quot;Cinzel&quot;}\">Welcome to Literate</h1><p class=\"text-xl\">Literate is a Clojure & ClojureScript application which you can use to create interactive documents.</p><p class=\"mt-4\">This interface that you're looking at it's called a <span class=\"font-bold\">Widget</span>, and you can create one from a Clojure REPL.</p><p class=\"mt-2 mb1\">There are a few different types of Widgets that are supported:</p><ul class=\"list-disc list-inside ml-2\"><li>Codemirror</li><li>Markdown</li><li>Hiccup</li><li>Vega</li><li>Map</li><li>Column layout</li><li>Row layout</li></ul></div>",7],[6,1,4,7],[6,2,[0,1],7],[6,3,"d5641590-48ab-454d-a6a7-e1350772d367",7],[6,7,"<span class=\"p-2 text-lg\">Vega Lite Widget</span>",7],[7,1,4,7],[7,2,[0,2],7],[7,3,"c0be62f9-1b4a-4241-9432-2bcd9502b60a",7],[7,8,[1,"{\"$schema\" \"https://vega.github.io/schema/vega-lite/v4.json\", :description \"A simple bar chart with embedded data.\", :data {:url \"https://vega.github.io/editor/data/stocks.csv\"}, :transform [{\"filter\" \"datum.symbol==='GOOG'\"}], :mark \"line\", :encoding {:x {:field \"date\", :type \"temporal\"}, :y {:field \"price\", :type \"quantitative\"}}}"],7],[8,1,4,7],[8,2,[0,1],7],[8,3,"c5614989-f17c-4c81-a3ce-5dc707464985",7],[8,7,"<span class=\"p-2 text-lg\">Codemirror Widget</span>",7],[9,1,4,7],[9,2,[0,3],7],[9,3,"dcc072f8-dd7b-47ef-8115-9b8b7c237d8d",7],[9,4,false,7],[9,5,"clojure",7],[9,6,"(ns literate.core\n  (:require [literate.server :as server]\n            [clojure.tools.cli :as cli]))\n\n(def cli-options\n  [[\"-p\" \"--port PORT\" \"Port number\"\n    :default 8118\n    :parse-fn #(Integer/parseInt %)\n    :validate [#(< 0 % 0x10000) \"Must be a number between 0 and 65536\"]]])\n\n(defn start [{:keys [port]}]\n  (println\n    (str \"Welcome to Literate\\n\"\n      \"Starting server...\"))\n\n  (server/run-server {:port port})\n\n  (println \"Server is up and running on port:\" port)\n  (println \"Happy coding!\"))\n\n(defn -main [& args]\n  (let [opts (cli/parse-opts args cli-options)\n        port (get-in opts [:options :port])]\n    (start {:port port})))\n",7]],"aevt",[0,1,2,3,4,7,11,15,19,23,5,8,12,16,20,24,6,9,13,17,21,25,26,27,28,10,14,22,18],"avet",[0,1,2,3,4,7,11,15,19,23,6,9,17,21,13,25]]