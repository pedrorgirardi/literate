["^ ","count",29,"tx0",536870912,"max-eid",6,"max-tx",536870913,"schema","{:widget/uuid {:db/unique :db.unique/identity}, :widget/parent {:db/valueType :db.type/ref, :db/cardinality :db.cardinality/one}, :widget/children {:db/valueType :db.type/ref, :db/cardinality :db.cardinality/many}}","attrs",[":widget/children",":widget/parent",":widget/type",":widget/uuid",":widget.codemirror/lineNumbers",":widget.codemirror/mode",":widget.codemirror/value",":widget.html/src",":widget.vega-embed/spec"],"keywords",[":widget.type/column",":widget.type/html",":widget.type/vega-embed",":widget.type/codemirror"],"eavt",[[1,0,2,1],[1,0,3,1],[1,0,4,1],[1,0,5,1],[1,0,6,1],[1,2,[0,0],1],[1,3,"2e5099fa-3185-4398-a379-a837ffa04e0e",1],[2,1,1,1],[2,2,[0,1],1],[2,3,"6542780b-fa09-42b0-8775-8f0ae8ca8ea9",1],[2,7,"<div class=\"flex flex-col space-y-3 p-3 font-light\"><h1 class=\"text-3xl\" style=\"{:font-family &quot;Cinzel&quot;}\">Welcome to Literate</h1><p class=\"text-xl\">Literate is a Clojure & ClojureScript application which you can use to create interactive documents.</p><p class=\"mt-4\">This interface that you're looking at it's called a <span class=\"font-bold\">Widget</span>, and you can create one from a Clojure REPL.</p><p class=\"mt-2 mb1\">There are a few different types of Widgets that are supported:</p><ul class=\"list-disc list-inside ml-2\"><li>Codemirror</li><li>Markdown</li><li>Hiccup</li><li>Vega</li><li>Map</li><li>Column layout</li><li>Row layout</li></ul></div>",1],[3,1,1,1],[3,2,[0,1],1],[3,3,"0ce8211e-0494-49b1-acba-a732b4414459",1],[3,7,"<span class=\"p-2 text-lg\">Vega Lite Widget</span>",1],[4,1,1,1],[4,2,[0,2],1],[4,3,"5e608a76-d235-4fd8-bd6d-48b018f657bb",1],[4,8,[1,"{\"$schema\" \"https://vega.github.io/schema/vega-lite/v4.json\", :description \"A simple bar chart with embedded data.\", :data {:url \"https://vega.github.io/editor/data/stocks.csv\"}, :transform [{\"filter\" \"datum.symbol==='GOOG'\"}], :mark \"line\", :encoding {:x {:field \"date\", :type \"temporal\"}, :y {:field \"price\", :type \"quantitative\"}}}"],1],[5,1,1,1],[5,2,[0,1],1],[5,3,"6e413c5b-815a-43f6-b7a8-e1f9bd73223d",1],[5,7,"<span class=\"p-2 text-lg\">Codemirror Widget</span>",1],[6,1,1,1],[6,2,[0,3],1],[6,3,"723b284e-01a6-4dc7-b081-ea49f148a00e",1],[6,4,false,1],[6,5,"clojure",1],[6,6,"(ns literate.core\n  (:require [literate.server :as server]\n            [clojure.tools.cli :as cli]))\n\n(def cli-options\n  [[\"-p\" \"--port PORT\" \"Port number\"\n    :default 8118\n    :parse-fn #(Integer/parseInt %)\n    :validate [#(< 0 % 0x10000) \"Must be a number between 0 and 65536\"]]])\n\n(defn start [{:keys [port]}]\n  (println\n    (str \"Welcome to Literate\\n\"\n      \"Starting server...\"))\n\n  (server/run-server {:port port})\n\n  (println \"Server is up and running on port:\" port)\n  (println \"Happy coding!\"))\n\n(defn -main [& args]\n  (let [opts (cli/parse-opts args cli-options)\n        port (get-in opts [:options :port])]\n    (start {:port port})))\n",1]],"aevt",[0,1,2,3,4,7,11,15,19,23,5,8,12,16,20,24,6,9,13,17,21,25,26,27,28,10,14,22,18],"avet",[0,1,2,3,4,7,11,15,19,23,13,6,17,9,21,25]]